Tue Mar 16 12:51:29 PDT 2021
Linux csslab9.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=930027(schau623) gid=2120930027(schau623) groups=2120930027(schau623),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
Running movie tests
Movie tests passed
Running HashTable tests
HashTable tests passed
Running customer tests
Customer tests passed
ERROR: Invalid Movie Type: Z
ERROR: Invalid Movie Type: Z
____________________[Viewing Inventory]____________________
[Annie Hall] Comedy | 1977 | By Woody Allen | 10 copies available / 0 copies currently being borrowed.
[Fargo] Comedy | 1996 | By Joel Coen | 10 copies available / 0 copies currently being borrowed.
[National Lampoon's Animal House] Comedy | 1978 | By John Landis | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2000 | By Different Years | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2003 | By Gore Verbinski | 10 copies available / 0 copies currently being borrowed.
[Sleepless in Seattle] Comedy | 1993 | By Nora Ephron | 10 copies available / 0 copies currently being borrowed.
[When Harry Met Sally] Comedy | 1989 | By Rob Reiner | 10 copies available / 0 copies currently being borrowed.
[You've Got Mail] Comedy | 1998 | By Nora Ephron | 10 copies available / 0 copies currently being borrowed.
[Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Same Director Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Unforgiven] Drama | 1992 | By Clint Eastwood | 10 copies available / 0 copies currently being borrowed.
[Good Will Hunting] Drama | 2000 | By Gus Van Sant | 10 copies available / 0 copies currently being borrowed.
[Silence of the Lambs] Drama | 1991 | By Jonathan Demme | 10 copies available / 0 copies currently being borrowed.
[Dogfight] Drama | 1991 | By Nancy Savoca | 10 copies available / 0 copies currently being borrowed.
[King of Hearts] Drama | 1967 | By Phillippe De Broca | 10 copies available / 0 copies currently being borrowed.
[Schindler's List] Drama | 1993 | By Steven Spielberg | 10 copies available / 0 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Cary Grant | 10 copies available / 0 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Clark Gable | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Vivien Leigh | 10 copies available / 0 copies currently being borrowed.
[The Wizard of Oz] Classic | 7/1939 | By Victor Fleming | Featuring Judy Garland | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Cary Grant | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[The Maltese Falcon] Classic | 10/1941 | By John Huston | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Ingrid Bergman | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring Donna Reed | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring James Steward | 10 copies available / 0 copies currently being borrowed.
[A Clockwork Orange] Classic | 2/1971 | By Stanley Kubrick | Featuring Malcolm McDowell | 10 copies available / 0 copies currently being borrowed.
[Harold and Maude] Classic | 3/1971 | By Hal Ashby | Featuring Ruth Gordon | 10 copies available / 0 copies currently being borrowed.
____________________[Displaying Mouse Minnie's History]____________________
History is Empty!
____________________[Displaying Frog Freddie's History]____________________
History is Empty!
____________________[Displaying Wacky Wally's History]____________________
History is Empty!
ERROR: Invalid Movie Type: Z
X is an invalid transaction type.
Z is an invalid transaction type.
ERROR: Invalid Customer ID: 1234
ERROR: Comedy Movie: Bogus Title, 2001 Not Found!
ERROR: Invalid Media Type:Z
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Drama Movie: Bogus Title by Steven Spielberg Not Found!
____________________[Viewing Inventory]____________________
[Annie Hall] Comedy | 1977 | By Woody Allen | 9 copies available / 1 copies currently being borrowed.
[Fargo] Comedy | 1996 | By Joel Coen | 9 copies available / 1 copies currently being borrowed.
[National Lampoon's Animal House] Comedy | 1978 | By John Landis | 9 copies available / 1 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2000 | By Different Years | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2003 | By Gore Verbinski | 10 copies available / 0 copies currently being borrowed.
[Sleepless in Seattle] Comedy | 1993 | By Nora Ephron | 9 copies available / 1 copies currently being borrowed.
[When Harry Met Sally] Comedy | 1989 | By Rob Reiner | 9 copies available / 1 copies currently being borrowed.
[You've Got Mail] Comedy | 1998 | By Nora Ephron | 9 copies available / 1 copies currently being borrowed.
[Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 9 copies available / 1 copies currently being borrowed.
[Same Director Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Unforgiven] Drama | 1992 | By Clint Eastwood | 9 copies available / 1 copies currently being borrowed.
[Good Will Hunting] Drama | 2000 | By Gus Van Sant | 9 copies available / 1 copies currently being borrowed.
[Silence of the Lambs] Drama | 1991 | By Jonathan Demme | 9 copies available / 1 copies currently being borrowed.
[Dogfight] Drama | 1991 | By Nancy Savoca | 8 copies available / 2 copies currently being borrowed.
[King of Hearts] Drama | 1967 | By Phillippe De Broca | 9 copies available / 1 copies currently being borrowed.
[Schindler's List] Drama | 1993 | By Steven Spielberg | 9 copies available / 1 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Cary Grant | 9 copies available / 1 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Clark Gable | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Vivien Leigh | 10 copies available / 0 copies currently being borrowed.
[The Wizard of Oz] Classic | 7/1939 | By Victor Fleming | Featuring Judy Garland | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Cary Grant | 9 copies available / 1 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Katherine Hepburn | 9 copies available / 1 copies currently being borrowed.
[The Maltese Falcon] Classic | 10/1941 | By John Huston | Featuring Humphrey Bogart | 9 copies available / 1 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Ingrid Bergman | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring Donna Reed | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring James Steward | 10 copies available / 0 copies currently being borrowed.
[A Clockwork Orange] Classic | 2/1971 | By Stanley Kubrick | Featuring Malcolm McDowell | 9 copies available / 1 copies currently being borrowed.
[Harold and Maude] Classic | 3/1971 | By Hal Ashby | Featuring Ruth Gordon | 0 copies available / 10 copies currently being borrowed.
____________________[Displaying Mouse Minnie's History]____________________
Mouse Minnie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Mouse Minnie borrowed 'The Philadelphia Story' which is a Classic movie by George Cukor
Mouse Minnie borrowed 'Good Will Hunting' which is a Drama movie by Gus Van Sant
Mouse Minnie borrowed 'The Philadelphia Story' which is a Classic movie by George Cukor
Mouse Minnie borrowed 'Good Morning Vietnam' which is a Drama movie by Barry Levinson
____________________[Displaying Mouse Mickey's History]____________________
Mouse Mickey borrowed 'Holiday' which is a Classic movie by George Cukor
Mouse Mickey borrowed 'The Maltese Falcon' which is a Classic movie by John Huston
Mouse Mickey borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Mouse Mickey borrowed 'A Clockwork Orange' which is a Classic movie by Stanley Kubrick
____________________[Displaying Frog Freddie's History]____________________
Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby
Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
____________________[Displaying Wacky Wally's History]____________________
Wacky Wally borrowed 'National Lampoon's Animal House' which is a Comedy movie by John Landis
Wacky Wally borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Wacky Wally borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Wacky Wally returned 'You've Got Mail' which is a Comedy movie by Nora Ephron
Wacky Wally borrowed 'You've Got Mail' which is a Comedy movie by Nora Ephron
____________________[Displaying Pig Porky's History]____________________
Pig Porky borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby
Pig Porky borrowed 'Dogfight' which is a Drama movie by Nancy Savoca
Pig Porky borrowed 'Silence of the Lambs' which is a Drama movie by Jonathan Demme
Pig Porky borrowed 'When Harry Met Sally' which is a Comedy movie by Rob Reiner
Pig Porky borrowed 'Annie Hall' which is a Comedy movie by Woody Allen
testFinal() tests ran
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
14722 warnings generated.
31429 warnings generated.
47852 warnings generated.
64814 warnings generated.
83182 warnings generated.
95157 warnings generated.
Suppressed 95157 warnings (95157 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./Customer.cpp
Running clang-format on ./Inventory.cpp
Running clang-format on ./main.cpp
Running clang-format on ./Store.cpp
Running clang-format on ./store_test.cpp
Running clang-format on ./Transaction.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==7806== Memcheck, a memory error detector
==7806== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7806== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7806== Command: ./a.out
==7806== Parent PID: 7358
==7806== 
==7806== 
==7806== HEAP SUMMARY:
==7806==     in use at exit: 14,487 bytes in 162 blocks
==7806==   total heap usage: 2,849 allocs, 2,687 frees, 191,546 bytes allocated
==7806== 
==7806== LEAK SUMMARY:
==7806==    definitely lost: 1,632 bytes in 14 blocks
==7806==    indirectly lost: 12,855 bytes in 148 blocks
==7806==      possibly lost: 0 bytes in 0 blocks
==7806==    still reachable: 0 bytes in 0 blocks
==7806==         suppressed: 0 bytes in 0 blocks
==7806== Rerun with --leak-check=full to see details of leaked memory
==7806== 
==7806== For lists of detected and suppressed errors, rerun with: -s
==7806== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/schau623/2021wi343b-movie-schau623/Customer.cpp':
Name                                                Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------------------------------
Customer::Customer(std::string, std::string, int)         1       0 100.00%         5       0 100.00%
Customer::addToHistory(Transaction*)                      1       0 100.00%         1       0 100.00%
Customer::getFirstName() const                            1       0 100.00%         1       0 100.00%
Customer::getLastName() const                             1       0 100.00%         1       0 100.00%
Customer::getCustomerID() const                           1       0 100.00%         1       0 100.00%
Customer::printHistory()                                  7       0 100.00%        12       0 100.00%
Customer::addBorrowed(char, int)                          1       0 100.00%         3       0 100.00%
Customer::returnADVD(char, int)                           8       1  87.50%         9       0 100.00%
Customer::isCurrentlyBorrowing(char, int)                 1       0 100.00%         4       0 100.00%
-----------------------------------------------------------------------------------------------------
TOTAL                                                    22       1  95.45%        37       0 100.00%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Inventory::addDramaMovie(int const&, std::string const&, std::string const&, int const&)                                                               5       1  80.00%        11       4  63.64%
Inventory::addComedyMovie(int const&, std::string const&, std::string const&, int const&)                                                              5       1  80.00%        10       3  70.00%
Inventory::addClassicMovie(int const&, std::string const&, std::string const&, std::string const&, std::string const&, int const&, int const&)         5       1  80.00%        11       3  72.73%
Inventory::peekClassicMovie(int const&) const                                                                                                          6       1  83.33%         8       3  62.50%
Inventory::peekComedyMovie(int const&) const                                                                                                           6       1  83.33%         7       3  57.14%
Inventory::peekDramaMovie(int const&) const                                                                                                            6       1  83.33%         7       3  57.14%
Inventory::getClassicIndex(int const&, int const&, std::string const&, std::string const&)                                                            13       1  92.31%        11       0 100.00%
Inventory::getComedyIndex(int const&, std::string const&)                                                                                              9       0 100.00%         9       0 100.00%
Inventory::getDramaIndex(std::string const&, std::string const&)                                                                                       9       0 100.00%         9       0 100.00%
Inventory::borrowMovie(std::string const&, int const&)                                                                                                19       3  84.21%        46       9  80.43%
Inventory::returnMovie(std::string const&, int const&)                                                                                                 7       1  85.71%        19       4  78.95%
Inventory::sortByDrama(DramaMovie*, DramaMovie*)                                                                                                       1       0 100.00%         3       0 100.00%
Inventory::sortByComedy(ComedyMovie*, ComedyMovie*)                                                                                                    1       0 100.00%         3       0 100.00%
Inventory::sortByClassic(ClassicMovie*, ClassicMovie*)                                                                                                 1       0 100.00%         3       0 100.00%
Inventory::sortMovies()                                                                                                                                1       0 100.00%         5       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                 94      11  88.30%       162      32  80.25%

File '/home/NETID/schau623/2021wi343b-movie-schau623/main.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
main                                                                                                                                                   1       0 100.00%        20       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                  1       0 100.00%        20       0 100.00%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Store.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Store::Store()                                                                                                                                         1       0 100.00%         1       0 100.00%
Store::fillCustomerDatabase(std::string const&)                                                                                                       15       2  86.67%        28       4  85.71%
Store::stockDVDShelves(std::string const&)                                                                                                            23       1  95.65%        55       2  96.36%
Store::readTransactions(std::string const&)                                                                                                          105      28  73.33%       303      86  71.62%
Store::displayInventory()                                                                                                                              1       0 100.00%         4       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                145      31  78.62%       391      92  76.47%

File '/home/NETID/schau623/2021wi343b-movie-schau623/store_test.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
testMovies()                                                                                                                                           1       0 100.00%        43       0 100.00%
testHashTable()                                                                                                                                        1       0 100.00%        33       0 100.00%
testCustomer()                                                                                                                                         1       0 100.00%        16       0 100.00%
testStoreAndInventory()                                                                                                                                1       1   0.00%         7       7   0.00%
testFinal()                                                                                                                                            1       0 100.00%         7       0 100.00%
testAll()                                                                                                                                              1       0 100.00%         7       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                  6       1  83.33%       113       7  93.81%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Transaction::Transaction(char const&, std::string const&, std::string const&, std::string const&, char const&)                                        11       1  90.91%        24       2  91.67%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                 11       1  90.91%        24       2  91.67%
=====================================================
The lines below were never executed
=====================================================
   39|      0|              other->getReleaseYear()) {
   40|      0|    this->releaseMonth = other->getReleaseMonth();
   41|      0|    this->majorActorFirst = other->getMajorActorFirst();
   42|      0|    this->majorActorLast = other->getMajorActorLast();
   43|      0|    this->type = 'C';
   44|      0|  }
   72|      0|      return false;
   73|      0|    }
   82|      0|      return false;
   83|      0|    }
   91|      0|      return releaseMonth < rhs->getReleaseMonth();
   92|      0|    }
   99|      0|    return false;
  100|      0|  }
   47|      0|      return false;
   48|      0|    }
   55|      0|    return false;
   56|      0|  }
   47|      0|      return false;
   48|      0|    }
   55|      0|    return false;
   56|      0|  }
  |   31|      0|    {
  |   32|      0|      int index = getIndex(
  |   33|      0|          key); // We get the key's index, and update the value for that key.
  |   34|      0|      values[index] = value;
   43|      0|      return;
   44|      0|    }
   75|      0|    return -1;
   76|      0|  }
  |   75|      0|    return -1;
  |   76|      0|  }
  |   75|      0|    return -1;
  |   76|      0|  }
   19|      0|      i->setStock(d->getStockAmt() +
   20|      0|                  i->getStockAmt()); // Just update that movie's stock amount.
   21|      0|      return;
   22|      0|    }
   33|      0|      i->setStock(f->getStockAmt() + i->getStockAmt());
   34|      0|      return;
   35|      0|    }
   49|      0|      i->setStock(c->getStockAmt() + i->getStockAmt());
   50|      0|      return;
   51|      0|    }
   60|      0|    cerr << "ERROR: Index exceeds ClassicMovieShelf size" << endl;
   61|      0|    return nullptr;
   62|      0|  }
   68|      0|    cerr << "ERROR: Index exceeds ComedyMovieShelf size" << endl;
   69|      0|    return nullptr;
   70|      0|  }
   76|      0|    cerr << "ERROR: Index exceeds DramaMovieShelf size" << endl;
   77|      0|    return nullptr;
   78|      0|  }
  144|      0|    cerr << "ERROR: Insufficient stock of "
  145|      0|         << comedyMovieShelf[index]->getTitle() << ", "
  146|      0|         << comedyMovieShelf[index]->getReleaseYear() << endl;
  147|      0|    return false;
  148|      0|  }
  158|      0|    cerr << "ERROR: Insufficient stock of "
  159|      0|         << dramaMovieShelf[index]->getTitle() << ", "
  160|      0|         << dramaMovieShelf[index]->getReleaseYear() << endl;
  161|      0|  }
  180|      0|    dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt() + 1);
  181|      0|    dramaMovieShelf[index]->setBorrowed(
  182|      0|        dramaMovieShelf[index]->getBorrowedAmt() - 1);
  183|      0|  }
   15|      0|    cout << "Can't open file " << fileName << endl;
   16|      0|  }
   32|      0|      cerr << "ERROR: Invalid Customer Id: " << custID << endl;
   33|      0|    }
   44|      0|    cout << "Can't open file " << fileName << endl;
   45|      0|  }
  101|      0|    cout << "Can't open file " << fileName << endl;
  102|      0|  }
  142|      0|          {
  143|      0|            cerr << "ERROR: Classic Movie Not Found!" << endl;
  144|      0|          } else // Otherwise, movie exists
  162|      0|                cerr << "ERROR: "
  163|      0|                     << customerDatabase.get(custID)->getFirstName() << " "
  164|      0|                     << customerDatabase.get(custID)->getLastName()
  165|      0|                     << " is not currently borrowing the classic movie "
  166|      0|                     << c->getTitle() << ", " << c->getDirector()
  167|      0|                     << ", so we can't return it." << endl;
  168|      0|              }
  170|      0|            {
  171|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  172|      0|            }
  191|      0|            cerr << "ERROR: Comedy Movie: " << title << ", " << year
  192|      0|                 << " Not Found!" << endl;
  212|      0|                cerr << "ERROR: "
  213|      0|                     << customerDatabase.get(custID)->getFirstName() << " "
  214|      0|                     << customerDatabase.get(custID)->getLastName()
  215|      0|                     << " is not currently borrowing the comedy movie "
  216|      0|                     << c->getTitle() << ", " << c->getDirector()
  217|      0|                     << ", so we can't return it." << endl;
  218|      0|              }
  220|      0|            {
  221|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  222|      0|            }
  225|      0|          // D Barry Levinson, Good Morning Vietnam,
  226|      0|          string director, title;
  227|      0|          string token;
  228|      0|          vector<string> tokens;
  229|      0|          while (getline(parseLine, token, ',')) {
  230|      0|            if (token[0] == ' ') // Remove beginning space.
  231|      0|            {
  232|      0|              token.erase(0, 1);
  233|      0|            }
  234|      0|            tokens.push_back(token);
  235|      0|          }
  236|      0|          director = tokens[0];
  237|      0|          title = tokens[1];
  238|      0|          int idx = inv->getDramaIndex(director, title);
  239|      0|          if (idx == -1) // If movie not found throw error
  240|      0|          {
  241|      0|            cerr << "ERROR: Drama Movie: " << title << " by " << director
  242|      0|                 << " Not Found!" << endl;
  243|      0|          } else // Otherwise movie exists, continue
  244|      0|          {
  245|      0|            DramaMovie *d = inv->peekDramaMovie(idx);
  246|      0|            if (customerDatabase.contains(
  247|      0|                    custID)) // if customer exists, continue
  248|      0|            {
  249|      0|              if (customerDatabase.get(custID)->isCurrentlyBorrowing('D',
  250|      0|                                                                     idx)) {
  251|      0|                inv->returnMovie(movieType, idx);
  252|      0|                customerDatabase.get(custID)->returnADVD(movieType[0], idx);
  253|      0|                Transaction *t = new Transaction(
  254|      0|                    'D', d->getTitle(), d->getDirector(),
  255|      0|                    customerDatabase.get(custID)->getFirstName() + " " +
  256|      0|                        customerDatabase.get(custID)->getLastName(),
  257|      0|                    transType[0]);
  258|      0|
  259|      0|                customerDatabase.get(custID)->addToHistory(t);
  260|      0|              } else {
  261|      0|                cerr << "ERROR: "
  262|      0|                     << customerDatabase.get(custID)->getFirstName() << " "
  263|      0|                     << customerDatabase.get(custID)->getLastName()
  264|      0|                     << " is not currently borrowing the drama movie "
  265|      0|                     << d->getTitle() << ", " << d->getDirector()
  266|      0|                     << ", so we can't return it." << endl;
  267|      0|              }
  268|      0|            } else // throw error for non existing customer
  269|      0|            {
  270|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  271|      0|            }
  272|      0|          }
  273|      0|        } else {
  274|      0|          cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
  275|      0|        }
  277|      0|      else {
  278|      0|        cerr << "ERROR: Invalid Media Type:" << mediaType << endl;
  279|      0|      }
  299|      0|            cerr << "ERROR: Classic Movie Not Found!" << endl;
  348|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  349|      0|            }
  382|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  383|      0|            }
   28|      0|    cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
   29|      0|    break;
  118|      0|void testStoreAndInventory() {
  119|      0|  Store s;
  120|      0|  s.fillCustomerDatabase("AlanCustomers.txt");
  121|      0|  s.stockDVDShelves("AlanMovies.txt");
  122|      0|  s.readTransactions("AlanCommands.txt");
  123|      0|  cout << "Store tests ran" << endl;
  124|      0|}
Tue Mar 16 12:52:32 PDT 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
